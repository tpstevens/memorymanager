Briefly address the following points, modify this text file and include it in
your reply.
-------------------------------------------------------------------------------

 
-------------------------------------------------------------------------------
Explain the conceptual distinctions between scripting languages, C++, C, and
assembly and when it is appropriate and inappropriate to use each.
-------------------------------------------------------------------------------
While C/C++ and assembly are generally compiled before distribution, scripting
languages may be compiled at runtime. Precompiled languages can be much more 
efficient than runtime-interpreted languages; because they have already been 
compiled down to native code, they have less overhead than an interpreted 
language. Whether or not the language is managed by a runtime (like C# or 
Python) is also a performance consideration.

C++ and C are well-suited to writing game engines, as they provide explicit 
control over memory optimizations. While assembly could give the same level of
performance, it would be extremely difficult to design an entire engine
architecture in assembly. It should be used for shorter, highly-focused
operations where the compiler may not be able to produce the desired 
optimization. Assembly language is also highly archictecture-dependent, while
the C or C++ compiler handles translation into machine code for the developer.

Though many enterprise projects rely on C (see NASA's coding guidelines), it
doesn't natively provide the same abstraction tools as languages like C++.

Scripting languages often hook into existing engine/gameplay code to provide
easier access for designers or artists. Many games, such as Blizzard's World of
Warcraft, expose in-game APIs through scripting languages like Lua. Because 
scripts do not necessarily need to be precompiled, developers can write or 
modify them without forcing a rebuild. As mentioned with WoW, scripts can 
provide players with the tools they need to mod or customize their game 
experience.  However, scripting languages may not provide much utility when
designing the core game logic, as it is easier to optimize performance with the
explicit control over memory and unmanaged execution of C and C++.


-------------------------------------------------------------------------------
Describe the limitations of code reuse through inheritance in a large, diverse
codebase.  Propose alternative solutions to these limitations.
-------------------------------------------------------------------------------
While inheritance can be a powerful tool, a system with many classes that 
inherit from each other may become convoluted, especially for developers who 
didn't set up the original system. Since the parent and the child code are 
separated, it may not be clear which parent(s)' functionality the child relies
on. Additionally, since child classes may sometimes implement behavior much 
differently than their parents, code may still have to be duplicated when
overriding an inherited method. 

Most of the problems that I've seen with inheritance stemmed from inheritance
that was "too deep" -- classes had parents with parents with parents and so on.
Deep inheritance is not necessarily a bad thing, but developers should be 
mindful of adding additional layers without good reason. There should always be
a clear connection between child and parent.

Another solution to providing flexible yet structured behavior is implementing
some form of entity-component system. This allows developers to add custom 
behavior to classes without resorting to creating yet another subclass. 
Entity-component systems enable a high degree of code reuse while still 
providing a mechanism for customization.

On a related note, developers sometimes utilize inheritance as a way of
providing a contract between objects; interfaces may be better suited here.


-------------------------------------------------------------------------------
Compare and contrast the biggest challenges of console game development versus
PC game development.
-------------------------------------------------------------------------------
While I've never developed a console game, I expect that the difference boils 
down to the number of available player hardware configurations.

Console game development is somewhat more of a focused process than development 
for PC. There is a limited number of systems to test and optimize, and
manufacturers place stricter requirements on performance and distribution.
Manufacturers like Sony and Microsoft also provide platform-specific developer 
tools for creating and optimizing games as well as provide access to 
multiplayer services and store APIs. This being said, because consoles are more
likely to have limited performance than PCs, extra care must be taken to ensure
a smooth playing experience. Patches cannot be as quickly distributed as on PC,
meaning that it can be harder to issue bugfixes or address player issues.

PC game development is more difficult in the sense that the game may be played
on machines with a wide range of CPU and GPU capabilities. Players
also have higher expectations for customization, such as creating custom
graphics quality profiles. Testing many different configurations can be a 
challenge, and developers may need to rely more heavily on an alpha or beta 
period to catch performance or system configuration edge cases.


-------------------------------------------------------------------------------
How would you attempt to understand the design of a large code base in a short
period of time?
-------------------------------------------------------------------------------
I try to work from the top down, first looking at high-level design and 
technical documents to get a good understanding of the project's goals and 
feature set. It's also helpful to get a quick verbal overview from someone
who's familiar with the codebase so I can better identify core components.

Once I'm pointed in the right direction, I like to break apart the codebase 
conceptually into systems: initialization, player input, multiplayer services,
core game loop, physics, rendering, AI behavior, etc. When I know ahead of time
what parts of the project I'll be working on, I try to focus more on those 
systems and the systems they interact with. Looking at interfaces and APIs can
be helpful in determining how individual systems work together.

As I go, I try to sketch out the program's flow, noting sections that I don't
understand to either return to later or ask about. Trying to explain the system
to myself or to someone else is also a big part of my learning process.


-------------------------------------------------------------------------------
Talk about a few Best Practices you use when programming in a team environment.
-------------------------------------------------------------------------------
Version control management: everyone uses some form of version control, but 
it's important that everyone on the team more or less follows the same rules.
For example, branching from the master repository is a great way to implement
far-reaching changes, but it's very important to talk to people who will be 
affected by the changes before merging them. Even if you've already discussed 
the scope of the changes with everyone ahead of time, it's good to give a heads
up when you're ready to merge what you've done. Writing detailed commit 
messages is a must.

Being flexible and really listening to alternatives: because I've been the team
leader on most of my school projects, I was often responsible for designing 
whatever program we'd be writing. I've noticed two things: first, when I wasn't 
receptive to other people's ideas, it soured the team experience. Nobody wants
to feel like their ideas aren't being considered, and getting a variety of 
perspectives can avoid unexpected problems down the road. Second, it's 
important to realize that even if I do think a particular solution is the best 
one, it can be much more productive to go with someone else's opinion, 
especially if they and others feel strongly about it. Being supportive of other
team members in general leads to a much more collaborative and positive
environment.

Style guides: while consistent formatting can make it easier to switch between
areas of code, I think that collaboratively writing clean code requires more 
than this. Ensuring consistency in comment frequency/type, deciding which log 
levels are used for which kinds of messages, and maintaining function/member 
naming conventions are very helpful without devolving into the tabs/spaces war.
Because we don't have a strict style guide at my current workplace, I try to 
mimic the formatting and conventions of the current document if it was
initially developed by someone else.

Open communication and code reviews: when I'm designing a large system or
making a significant change, I like to run my solution by someone else after
I've worked through it on paper. They don't need to be big discussions every 
time, but it's generally a good idea to get a second opinion, especially if I'm
a junior member on a project.

Finally, committing without a code review should be punishable by death.


-------------------------------------------------------------------------------
Discuss an instance of a bad game design decision in an otherwise good game.
-------------------------------------------------------------------------------
According to Steam, I've played twice as much Terraria as anything else, and I 
feel like I have a good understanding of its selling points and its flaws. My
only real criticism of the game is its low drop rates for many useful items.

One could argue that games like WoW, Counterstrike, and others that feature 
randomly-awarded items rely on random item acquisition to keep players 
interested, much like gambling. It makes sense; they want to reward players for
paying their subscriptions or maintaining high skill levels. Making high-rarity
items easily accessible to all would cheapen the experience for players who 
worked for many months or years to earn them and would decrease the items' 
apparent worth.

However, Terraria is a single-player (or cooperative multiplayer) game whose
financial success doesn't rely on in-game transactions. I don't think there's
a good reason to artificially limit access to high-level items that all players
will find useful. Players have four options for obtaining items with low drop 
rates:

- Farm until they happen to get their desired item, which may take a while and
  often involves enemies that aren't readily accessible (for example, some 
  appear only at night or during specific weather, and the rate at which they 
  drop a rare item can be as low as 0.04%).
  
- Build an in-game AFK farm to automatically spawn and kill monsters with lava 
  or traps.
  
- Give themselves the item by modifying their game save.

- Get lucky.

I'm not at all opposed to randomization mechanics; however, I believe that 
Terraria goes a little too far. Some possible solutions:

- Increase the drop rate of an item over time (while the player doesn't already
  it). The increase in rate could be tied to a player's progression; the more 
  bosses they kill, the more likely they'll be to receive rare items from 
  random drops.
  
- In addition to random drops, provide a mechanism for players to purchase 
  items. High-utility items should be expensive so their acquisition still 
  feels satisfying. At the same time, the player will be able to reliably 
  expect when they'll obtain an item instead of feeling like they've been 
  waiting indefinitely.
  
- During character creation, allow the player to optionally choose one or two 
  low-level accessories from a preselected list, because early-game access to 
  items can drastically change how the first part of the game plays out. To 
  maintain some level of randomness that the player must overcome, players 
  should only be able to use the character customization options once they have
  achieved some milestone(s) in a previous playthrough. While this is just as
  susceptible to savegame modification, I believe that giving the player more
  freedom is almost always a good decision.